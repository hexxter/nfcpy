==========
tagtool.py
==========

The **tagtool** program can be used to read or write NFC Forum Tags. For some tags, currently Type 3 Tags only, the **tagtool** can also be used to format for NDEF use. ::

  $ tagtool.py [-h|--help] [options] command

.. program:: tagtool.py

.. option:: -q

   Do not print any log messages except errors.

.. option:: -d

   Include debug messages in the log output.

.. option:: -l, --loop

   Repeat the command endlessly, use Control-C to abort.

.. option:: --no-wait

   Do not wait until the tag is removed but immediately quit or restart (if
   `--loop` is set) after completion.

.. option:: --device NAME

   Use a specific reader or search only in a group of readers. The
   syntax for NAME is (parts in [] are optional):

   * usb[:vendor[:product]] - vendor and product id in hex
   * usb[:bus[:device] - bus and device number in decimal
   * tty[:(usb|com)[:port]] - usb virtual or real serial port

Commands
========

Available commands are listed below. The default if no command is specified is to invoke **tagtool.py show**.

show
----

The **show** command prints information about a tag, including NDEF data if present.::

  $ ndeftool.py show [-h|--help]

dump
----

The **dump** command dumps tag data to the console or into a file. Data written to the console is formatted as a hex string. Data written to a file is plain bytes. ::

  $ tagtool.py dump [-h|--help] [options]

Options:

.. program:: tagtool.py dump

.. option:: -o FILE

   Write data to FILE. Data format is plain bytes.

load
----

The **load** command writes data to a tag. Data may be plain bytes or a hex string, as generated by the **dump** command or with the **ndeftool**. ::

  $ tagtool.py load [-h|--help] [options] FILE

Options:

.. program:: tagtool.py load

format
------

The **format** command formats a tag for NDEF use. It is currently limited to Type 3 Tags. ::

  $ tagtool.py format [-h|--help] [options]

Options:

.. program:: tagtool.py format

.. option:: --tt3-ver STR

   Type 3 Tag NDEF mapping version number, specified as a version
   string with minor and major number separated by a single dot
   character. Both major and minor version numbers must be in range
   ``0<=N<=15``. The default value is ``"1.1"``.

.. option:: --tt3-nbr INT

   Type 3 Tag attribute block *Nbr* field value, the number of blocks
   that can be read at once. Must be in range ``0<=INT<=255``. If this
   option is not specified the automatically detected value is
   written.

.. option:: --tt3-nbw INT

   Type 3 Tag attribute block *Nbw* field value, the number of blocks
   that can be written at once. Must be in range ``0<=INT<=255``. If
   this option is not specified the automatically detected value is
   written.

.. option:: --tt3-max INT

   Type 3 Tag attribute block *Nmaxb* field value, which is the
   maximum number of blocks available for NDEF data. Must be in range
   ``0<=INT<=255``. If this option is not specified the automatically
   detected value is written.

.. option:: --tt3-rfu INT

   Type 3 Tag attribute block *reserved* field value. Must be in range
   ``0<=INT<=255``. The default value is 0.

.. option:: --tt3-wf INT

   Type 3 Tag attribute block *WriteF* field value. Must be in range
   ``0<=INT<=255``. The default value is 0.

.. option:: --tt3-rw INT

   Type 3 Tag attribute block *RW Flag* field value. Must be in range
   ``0<=INT<=255``. The default value is 1.

.. option:: --tt3-len INT

   Type 3 Tag attribute block *Ln* field value that specifies the
   actual size of the NDEF data stored. Must be in range
   ``0<=INT<=16777215``. The default value is 0.

.. option:: --tt3-crs INT

   Type 3 Tag attribute block *Checksum* field value. Must be in range
   ``0<=INT<=65535``. If this option is not specified the automatically
   computed checksum is written.

Recipes
=======

Copy NDEF from one tag to another::

  $ tagtool.py dump -o /tmp/tag.ndef && tagtool load /tmp/tag.ndef

Copy NDEF from one tag to many others::

  $ tagtool.py dump -o /tmp/tag.ndef && tagtool --loop load /tmp/tag.ndef

